{"version":3,"file":"dist/BlueMarble.user.js","names":["_Overlay_instances","createElement_fn","WeakSet","tag","properties","additionalProperties","element","document","createElement","this","overlay","currentParent","appendChild","parentStack","push","property","value","Object","entries","Utils","escapeHTML","text","div","textContent","innerHTML","name","GM_info","script","toString","version","fn","documentElement","remove","inject","originalFetch","window","fetch","async","args","response","apply","cloned","clone","headers","get","includes","endpointName","Request","url","json","then","jsonData","postMessage","source","endpoint","catch","err","cssOverlay","GM_getResourceText","GM_addStyle","stylesheetLink","href","rel","as","onload","head","constructor","observerBody","observerBodyTarget","targetDisplayCoords","createObserverBody","target","MutationObserver","mutations","mutation","node","addedNodes","HTMLElement","matches","getObserverBody","observe","observer","watchChildList","watchSubtree","childList","subtree","apiHandler","outputStatusId","setApiHandler","buildElement","length","pop","buildOverlay","parent","addDiv","callback","__privateMethod","call","addP","addImg","addHeader","level","addHr","addBr","addCheckbox","label","checkbox","type","insertBefore","firstChild","addButton","addButtonHelp","tooltip","className","onclick","updateInnerHTML","addInput","addInputFile","container","input","style","button","addEventListener","click","maxWidth","offsetWidth","files","addTextarea","id","html","doSafe","getElementById","replace","HTMLInputElement","handleDrag","moveMe","iMoveThings","offsetX","isDragging","offsetY","querySelector","event","clientX","getBoundingClientRect","left","clientY","top","body","userSelect","classList","add","touch","touches","passive","right","preventDefault","handleDisplayError","consoleError","console","error","coordsHandler","serverTPtoDisplayTP","tile","pixel","parseInt","disableAll","coordsTilePixel","spontaneousResponseListener","data","dataJSON","split","filter","s","isNaN","Number","nextLevelPixels","Math","ceil","pow","floor","clog","log","droplets","Intl","NumberFormat","format","coordsTile","payloadExtractor","URLSearchParams","coordsPixel","displayTP","spanElements","querySelectorAll","trim","displayCoords","parentNode","insertAdjacentElement","toLowerCase","alt","src","checked","title","instance","coords","placeholder","min","max","step","readOnly"],"sources":["../src/overlay.js","../src/observers.js","../src/utils.js","../src/main.js","../src/coordsHandler.js","../src/apiHandler.js"],"sourcesContent":["/** The overlay builder for the Blue Marble script.\n * @description This class handles the overlay UI for the Blue Marble script.\n * @since 0.0.2\n * @example\n * const overlay = new Overlay();\n * overlay.addDiv('overlay')\n *   .addHeader(1, {'textContent': 'Your Overlay'}).buildElement()\n *   .addP({'textContent': 'This is your overlay. It is versatile.'}).buildElement()\n *   .addHr().buildElement()\n * .buildOverlay(document.body);\n * // Output:\n * // (Assume <body> already exists in the webpage)\n * <body>\n *   <div id=\"overlay\">\n *     <h1>Your Overlay</h1>\n *     <p>This is your overlay. It is versatile.</p>\n *   </div>\n * </body>\n*/\nexport default class Overlay {\n\n  /** Constructor for the Overlay class.\n   * @param {string} name - The name of the userscript\n   * @param {string} version - The version of the userscript\n   * @since 0.0.2\n   * @see {@link Overlay}\n   */\n  constructor(name, version) {\n    this.name = name; // Name of userscript\n    this.version = version; // Version of userscript\n\n    this.apiHandler = null; // The API handler instance. Later populated when setApiHandler is called\n    \n    this.outputStatusId = 'bm-output-status'; // ID for status element\n\n    this.overlay = null; // The overlay root DOM HTMLElement\n    this.currentParent = null; // The current parent HTMLElement in the overlay\n    this.parentStack = []; // Tracks the parent elements BEFORE the currentParent so we can nest elements\n  }\n\n  /** Populates the apiHandler variable with the apiHandler class.\n   * @param {apiHandler} apiHandler - The apiHandler class instance\n   * @since 0.41.4\n   */\n  setApiHandler(apiHandler) {this.apiHandler = apiHandler;}\n\n  /** Creates an element.\n   * For **internal use** of the {@link Overlay} class.\n   * @param {string} tag - The tag name as a string.\n   * @param {Object.<string, any>} [properties={}] - The DOM properties of the element.\n   * @returns {HTMLElement} HTML Element\n   * @since 0.43.2\n   */\n  #createElement(tag, properties = {}, additionalProperties={}) {\n\n    const element = document.createElement(tag); // Creates the element\n\n    // If this is the first element made...\n    if (!this.overlay) {\n      this.overlay = element; // Declare it the highest overlay element\n      this.currentParent = element;\n    } else {\n      this.currentParent.appendChild(element); // ...else delcare it the child of the last element\n      this.parentStack.push(this.currentParent);\n      this.currentParent = element;\n    }\n\n    // For every passed in property (shared by all like-elements), apply the it to the element\n    for (const [property, value] of Object.entries(properties)) {\n      element[property] = value;\n    }\n\n    // For every passed in additional property, apply the it to the element\n    for (const [property, value] of Object.entries(additionalProperties)) {\n      element[property] = value;\n    }\n    \n    return element;\n  }\n\n  /** Finishes building an element.\n   * Call this after you are finished adding children.\n   * If the element will have no children, call it anyways.\n   * @returns {Overlay} Overlay class instance (this)\n   * @since 0.43.2\n   * @example\n   * overlay\n   *   .addDiv()\n   *     .addHeader(1).buildElement() // Breaks out of the <h1>\n   *     .addP().buildElement() // Breaks out of the <p>\n   *   .buildElement() // Breaks out of the <div>\n   *   .addHr() // Since there are no more elements, calling buildElement() is optional\n   * .buildOverlay(document.body);\n   */\n  buildElement() {\n    if (this.parentStack.length > 0) {\n      this.currentParent = this.parentStack.pop();\n    }\n    return this;\n  }\n\n  /** Finishes building the overlay and displays it.\n   * Call this when you are done chaining methods.\n   * @param {HTMLElement} parent - The parent HTMLElement this overlay should be appended to as a child.\n   * @since 0.43.2\n   * @example\n   * overlay\n   *   .addDiv()\n   *     .addP().buildElement()\n   *   .buildElement()\n   * .buildOverlay(document.body); // Adds DOM structure to document body\n   * // <div><p></p></div>\n   */\n  buildOverlay(parent) {\n    parent.appendChild(this.overlay);\n\n    // Resets the class-bound variables of this class instance back to default so overlay can be build again later\n    this.overlay = null;\n    this.currentParent = null;\n    this.parentStack = [];\n  }\n\n  /** Adds a `<div>` to the overlay.\n   * This `<div>` element will have properties shared between all `<div>` elements in the overlay.\n   * You can override the shared properties by using a callback.\n   * @param {Object.<string, any>} [additionalProperties={}] - The DOM properties of the `<div>` that are NOT shared between all overlay `<div>` elements. These should be camelCase.\n   * @param {function(Overlay, HTMLDivElement):void} [callback=()=>{}] - Additional JS modification to the `<div>`.\n   * @returns {Overlay} Overlay class instance (this)\n   * @since 0.43.2\n   * @example\n   * // Assume all <div> elements have a shared class (e.g. {'className': 'bar'})\n   * overlay.addDiv({'id': 'foo'}).buildOverlay(document.body);\n   * // Output:\n   * // (Assume <body> already exists in the webpage)\n   * <body>\n   *   <div id=\"foo\" class=\"bar\"></div>\n   * </body>\n   */\n  addDiv(additionalProperties = {}, callback = () => {}) {\n\n    const properties = {}; // Shared <div> DOM properties\n\n    const div = this.#createElement('div', properties, additionalProperties); // Creates the <div> element\n    callback(this, div); // Runs any script passed in through the callback\n    return this;\n  }\n\n  /** Adds a `<p>` to the overlay.\n   * This `<p>` element will have properties shared between all `<p>` elements in the overlay.\n   * You can override the shared properties by using a callback.\n   * @param {Object.<string, any>} [additionalProperties={}] - The DOM properties of the `<p>` that are NOT shared between all overlay `<p>` elements. These should be camelCase.\n   * @param {function(Overlay, HTMLParagraphElement):void} [callback=()=>{}] - Additional JS modification to the `<p>`.\n   * @returns {Overlay} Overlay class instance (this)\n   * @since 0.43.2\n   * @example\n   * // Assume all <p> elements have a shared class (e.g. {'className': 'bar'})\n   * overlay.addP({'id': 'foo', 'textContent': 'Foobar.'}).buildOverlay(document.body);\n   * // Output:\n   * // (Assume <body> already exists in the webpage)\n   * <body>\n   *   <p id=\"foo\" class=\"bar\">Foobar.</p>\n   * </body>\n   */\n  addP(additionalProperties = {}, callback = () => {}) {\n\n    const properties = {}; // Shared <p> DOM properties\n\n    const p = this.#createElement('p', properties, additionalProperties); // Creates the <p> element\n    callback(this, p); // Runs any script passed in through the callback\n    return this;\n  }\n\n  /** Adds a `<img>` to the overlay.\n   * This `<img>` element will have properties shared between all `<img>` elements in the overlay.\n   * You can override the shared properties by using a callback.\n   * @param {Object.<string, any>} [additionalProperties={}] - The DOM properties of the `<img>` that are NOT shared between all overlay `<img>` elements. These should be camelCase.\n   * @param {function(Overlay, HTMLImageElement):void} [callback=()=>{}] - Additional JS modification to the `<img>`.\n   * @returns {Overlay} Overlay class instance (this)\n   * @since 0.43.2\n   * @example\n   * // Assume all <img> elements have a shared class (e.g. {'className': 'bar'})\n   * overlay.addimg({'id': 'foo', 'src': './img.png'}).buildOverlay(document.body);\n   * // Output:\n   * // (Assume <body> already exists in the webpage)\n   * <body>\n   *   <img id=\"foo\" src=\"./img.png\" class=\"bar\">\n   * </body>\n   */\n  addImg(additionalProperties = {}, callback = () => {}) {\n\n    const properties = {}; // Shared <img> DOM properties\n\n    const img = this.#createElement('img', properties, additionalProperties); // Creates the <img> element\n    callback(this, img); // Runs any script passed in through the callback\n    return this;\n  }\n\n  /** Adds a header to the overlay.\n   * This header element will have properties shared between all header elements in the overlay.\n   * You can override the shared properties by using a callback.\n   * @param {number} level - The header level. Must be between 1 and 6 (inclusive)\n   * @param {Object.<string, any>} [additionalProperties={}] - The DOM properties of the header that are NOT shared between all overlay header elements. These should be camelCase.\n   * @param {function(Overlay, HTMLHeadingElement):void} [callback=()=>{}] - Additional JS modification to the header.\n   * @returns {Overlay} Overlay class instance (this)\n   * @since 0.43.7\n   * @example\n   * // Assume all header elements have a shared class (e.g. {'className': 'bar'})\n   * overlay.addHeader(6, {'id': 'foo', 'textContent': 'Foobar.'}).buildOverlay(document.body);\n   * // Output:\n   * // (Assume <body> already exists in the webpage)\n   * <body>\n   *   <h6 id=\"foo\" class=\"bar\">Foobar.</h6>\n   * </body>\n   */\n  addHeader(level, additionalProperties = {}, callback = () => {}) {\n\n    const properties = {}; // Shared header DOM properties\n\n    const header = this.#createElement('h' + level, properties, additionalProperties); // Creates the header element\n    callback(this, header); // Runs any script passed in through the callback\n    return this;\n  }\n\n  /** Adds a `<hr>` to the overlay.\n   * This `<hr>` element will have properties shared between all `<hr>` elements in the overlay.\n   * You can override the shared properties by using a callback.\n   * @param {Object.<string, any>} [additionalProperties={}] - The DOM properties of the `<hr>` that are NOT shared between all overlay `<hr>` elements. These should be camelCase.\n   * @param {function(Overlay, HTMLHRElement):void} [callback=()=>{}] - Additional JS modification to the `<hr>`.\n   * @returns {Overlay} Overlay class instance (this)\n   * @since 0.43.7\n   * @example\n   * // Assume all <hr> elements have a shared class (e.g. {'className': 'bar'})\n   * overlay.addhr({'id': 'foo'}).buildOverlay(document.body);\n   * // Output:\n   * // (Assume <body> already exists in the webpage)\n   * <body>\n   *   <hr id=\"foo\" class=\"bar\">\n   * </body>\n   */\n  addHr(additionalProperties = {}, callback = () => {}) {\n\n    const properties = {}; // Shared <hr> DOM properties\n\n    const hr = this.#createElement('hr', properties, additionalProperties); // Creates the <hr> element\n    callback(this, hr); // Runs any script passed in through the callback\n    return this;\n  }\n\n  /** Adds a `<br>` to the overlay.\n   * This `<br>` element will have properties shared between all `<br>` elements in the overlay.\n   * You can override the shared properties by using a callback.\n   * @param {Object.<string, any>} [additionalProperties={}] - The DOM properties of the `<br>` that are NOT shared between all overlay `<br>` elements. These should be camelCase.\n   * @param {function(Overlay, HTMLBRElement):void} [callback=()=>{}] - Additional JS modification to the `<br>`.\n   * @returns {Overlay} Overlay class instance (this)\n   * @since 0.43.11\n   * @example\n   * // Assume all <br> elements have a shared class (e.g. {'className': 'bar'})\n   * overlay.addbr({'id': 'foo'}).buildOverlay(document.body);\n   * // Output:\n   * // (Assume <body> already exists in the webpage)\n   * <body>\n   *   <br id=\"foo\" class=\"bar\">\n   * </body>\n   */\n  addBr(additionalProperties = {}, callback = () => {}) {\n\n    const properties = {}; // Shared <br> DOM properties\n\n    const br = this.#createElement('br', properties, additionalProperties); // Creates the <br> element\n    callback(this, br); // Runs any script passed in through the callback\n    return this;\n  }\n\n  /** Adds a checkbox to the overlay.\n   * This checkbox element will have properties shared between all checkbox elements in the overlay.\n   * You can override the shared properties by using a callback. Note: the checkbox element is inside a label element.\n   * @param {Object.<string, any>} [additionalProperties={}] - The DOM properties of the checkbox that are NOT shared between all overlay checkbox elements. These should be camelCase.\n   * @param {function(Overlay, HTMLLabelElement, HTMLInputElement):void} [callback=()=>{}] - Additional JS modification to the checkbox.\n   * @returns {Overlay} Overlay class instance (this)\n   * @since 0.43.10\n   * @example\n   * // Assume all checkbox elements have a shared class (e.g. {'className': 'bar'})\n   * overlay.addCheckbox({'id': 'foo', 'textContent': 'Foobar.'}).buildOverlay(document.body);\n   * // Output:\n   * // (Assume <body> already exists in the webpage)\n   * <body>\n   *   <label>\n   *     <input type=\"checkbox\" id=\"foo\" class=\"bar\">\n   *     \"Foobar.\"\n   *   </label>\n   * </body>\n   */\n  addCheckbox(additionalProperties = {}, callback = () => {}) {\n\n    const properties = {'type': 'checkbox'}; // Shared checkbox DOM properties\n\n    const label = this.#createElement('label', {'textContent': additionalProperties['textContent'] ?? ''}); // Creates the label element\n    delete additionalProperties['textContent']; // Deletes 'textContent' DOM property before adding the properties to the checkbox\n    const checkbox = this.#createElement('input', properties, additionalProperties); // Creates the checkbox element\n    label.insertBefore(checkbox, label.firstChild); // Makes the checkbox the first child of the label (before the text content)\n    this.buildElement(); // Signifies that we are done adding children to the checkbox\n    callback(this, label, checkbox); // Runs any script passed in through the callback\n    return this;\n  }\n  \n  /** Adds a `<button>` to the overlay.\n   * This `<button>` element will have properties shared between all `<button>` elements in the overlay.\n   * You can override the shared properties by using a callback.\n   * @param {Object.<string, any>} [additionalProperties={}] - The DOM properties of the `<button>` that are NOT shared between all overlay `<button>` elements. These should be camelCase.\n   * @param {function(Overlay, HTMLButtonElement):void} [callback=()=>{}] - Additional JS modification to the `<button>`.\n   * @returns {Overlay} Overlay class instance (this)\n   * @since 0.43.12\n   * @example\n   * // Assume all <button> elements have a shared class (e.g. {'className': 'bar'})\n   * overlay.addButton({'id': 'foo', 'textContent': 'Foobar.'}).buildOverlay(document.body);\n   * // Output:\n   * // (Assume <body> already exists in the webpage)\n   * <body>\n   *   <button id=\"foo\" class=\"bar\">Foobar.</button>\n   * </body>\n   */\n  addButton(additionalProperties = {}, callback = () => {}) {\n\n    const properties = {}; // Shared <button> DOM properties\n\n    const button = this.#createElement('button', properties, additionalProperties); // Creates the <button> element\n    callback(this, button); // Runs any script passed in through the callback\n    return this;\n  }\n\n  /** Adds a help button to the overlay. It will have a \"?\" icon unless overridden in callback.\n   * On click, the button will attempt to output the title to the output element (ID defined in Overlay constructor).\n   * This `<button>` element will have properties shared between all `<button>` elements in the overlay.\n   * You can override the shared properties by using a callback.\n   * @param {Object.<string, any>} [additionalProperties={}] - The DOM properties of the `<button>` that are NOT shared between all overlay `<button>` elements. These should be camelCase.\n   * @param {function(Overlay, HTMLButtonElement):void} [callback=()=>{}] - Additional JS modification to the `<button>`.\n   * @returns {Overlay} Overlay class instance (this)\n   * @since 0.43.12\n   * @example\n   * // Assume all help button elements have a shared class (e.g. {'className': 'bar'})\n   * overlay.addButtonHelp({'id': 'foo', 'title': 'Foobar.'}).buildOverlay(document.body);\n   * // Output:\n   * // (Assume <body> already exists in the webpage)\n   * <body>\n   *   <button id=\"foo\" class=\"bar\" title=\"Help: Foobar.\">?</button>\n   * </body>\n   * @example\n   * // Assume all help button elements have a shared class (e.g. {'className': 'bar'})\n   * overlay.addButtonHelp({'id': 'foo', 'textContent': 'Foobar.'}).buildOverlay(document.body);\n   * // Output:\n   * // (Assume <body> already exists in the webpage)\n   * <body>\n   *   <button id=\"foo\" class=\"bar\" title=\"Help: Foobar.\">?</button>\n   * </body>\n   */\n  addButtonHelp(additionalProperties = {}, callback = () => {}) {\n\n    const tooltip = additionalProperties['title'] ?? additionalProperties['textContent'] ?? 'Help: No info'; // Retrieves the tooltip\n\n    // Makes sure the tooltip is stored in the title property\n    delete additionalProperties['textContent'];\n    additionalProperties['title'] = `Help: ${tooltip}`;\n\n    // Shared help button DOM properties\n    const properties = {\n      'textContent': '?',\n      'className': 'bm-help',\n      'onclick': () => {\n        this.updateInnerHTML(this.outputStatusId, tooltip);\n      }\n    };\n\n    const help = this.#createElement('button', properties, additionalProperties); // Creates the <button> element\n    callback(this, help); // Runs any script passed in through the callback\n    return this;\n  }\n\n  /** Adds a `<input>` to the overlay.\n   * This `<input>` element will have properties shared between all `<input>` elements in the overlay.\n   * You can override the shared properties by using a callback.\n   * @param {Object.<string, any>} [additionalProperties={}] - The DOM properties of the `<input>` that are NOT shared between all overlay `<input>` elements. These should be camelCase.\n   * @param {function(Overlay, HTMLInputElement):void} [callback=()=>{}] - Additional JS modification to the `<input>`.\n   * @returns {Overlay} Overlay class instance (this)\n   * @since 0.43.13\n   * @example\n   * // Assume all <input> elements have a shared class (e.g. {'className': 'bar'})\n   * overlay.addInput({'id': 'foo', 'textContent': 'Foobar.'}).buildOverlay(document.body);\n   * // Output:\n   * // (Assume <body> already exists in the webpage)\n   * <body>\n   *   <input id=\"foo\" class=\"bar\">Foobar.</input>\n   * </body>\n   */\n  addInput(additionalProperties = {}, callback = () => {}) {\n\n    const properties = {}; // Shared <input> DOM properties\n\n    const input = this.#createElement('input', properties, additionalProperties); // Creates the <input> element\n    callback(this, input); // Runs any script passed in through the callback\n    return this;\n  }\n\n  /** Adds a file input to the overlay. This includes a container and a button.\n   * This input element will have properties shared between all file input elements in the overlay.\n   * You can override the shared properties by using a callback.\n   * @param {Object.<string, any>} [additionalProperties={}] - The DOM properties of the file input that are NOT shared between all overlay file input elements. These should be camelCase.\n   * @param {function(Overlay, HTMLDivElement, HTMLInputElement, HTMLButtonElement):void} [callback=()=>{}] - Additional JS modification to the file input.\n   * @returns {Overlay} Overlay class instance (this)\n   * @since 0.43.17\n   * @example\n   * // Assume all file input elements have a shared class (e.g. {'className': 'bar'})\n   * overlay.addInputFile({'id': 'foo', 'textContent': 'Foobar.'}).buildOverlay(document.body);\n   * // Output:\n   * // (Assume <body> already exists in the webpage)\n   * <body>\n   *   <div>\n   *     <input type=\"file\" id=\"foo\" class=\"bar\" style=\"display: none\"></input>\n   *     <button>Foobar.</button>\n   *   </div>\n   * </body>\n   */\n  addInputFile(additionalProperties = {}, callback = () => {}) {\n    \n    const properties = {'type': 'file', 'style': 'display: none;'}; // Shared file input DOM properties\n    const text = additionalProperties['textContent'] ?? ''; // Retrieves the text content\n\n    delete additionalProperties['textContent']; // Deletes the text content before applying the additional properties to the file input\n\n    const container = this.#createElement('div'); // Container for file input\n    const input = this.#createElement('input', properties, additionalProperties); // Creates the file input\n    this.buildElement(); // Signifies that we are done adding children to the file input\n    const button = this.#createElement('button', {'textContent': text});\n    this.buildElement(); // Signifies that we are done adding children to the button\n    this.buildElement(); // Signifies that we are done adding children to the container\n\n    button.addEventListener('click', () => {\n      input.click(); // Clicks the file input\n    });\n\n    // Changes the button text content (and trims the file name)\n    input.addEventListener('change', () => {\n      button.style.maxWidth = `${button.offsetWidth}px`;\n      if (input.files.length > 0) {\n        button.textContent = input.files[0].name;\n      } else {\n        button.textContent = text;\n      }\n    });\n\n    callback(this, container, input, button); // Runs any script passed in through the callback\n    return this;\n  }\n\n  /** Adds a `<textarea>` to the overlay.\n   * This `<textarea>` element will have properties shared between all `<textarea>` elements in the overlay.\n   * You can override the shared properties by using a callback.\n   * @param {Object.<string, any>} [additionalProperties={}] - The DOM properties of the `<textarea>` that are NOT shared between all overlay `<textarea>` elements. These should be camelCase.\n   * @param {function(Overlay, HTMLTextAreaElement):void} [callback=()=>{}] - Additional JS modification to the `<textarea>`.\n   * @returns {Overlay} Overlay class instance (this)\n   * @since 0.43.13\n   * @example\n   * // Assume all <textarea> elements have a shared class (e.g. {'className': 'bar'})\n   * overlay.addTextarea({'id': 'foo', 'textContent': 'Foobar.'}).buildOverlay(document.body);\n   * // Output:\n   * // (Assume <body> already exists in the webpage)\n   * <body>\n   *   <textarea id=\"foo\" class=\"bar\">Foobar.</textarea>\n   * </body>\n   */\n  addTextarea(additionalProperties = {}, callback = () => {}) {\n\n    const properties = {}; // Shared <textarea> DOM properties\n\n    const textarea = this.#createElement('textarea', properties, additionalProperties); // Creates the <textarea> element\n    callback(this, textarea); // Runs any script passed in through the callback\n    return this;\n  }\n\n  /** Updates the inner HTML of the element.\n   * The element is discovered by it's id.\n   * If the element is an <input>, it will modify the value attribute instead.\n   * @param {string} id - The ID of the element to change\n   * @param {string} html - The HTML/text to update with\n   * @param {boolean} [doSafe] - (Optional) Should `textContent` be used instead of `innerHTML` to avoid XSS? False by default\n   * @since 0.24.2\n   */\n  updateInnerHTML(id, html, doSafe=false) {\n\n    const element = document.getElementById(id.replace(/^#/, '')); // Retrieve the element from the 'id' (removed the '#')\n    \n    if (!element) {return;} // Kills itself if the element does not exist\n\n    // Input elements don't have innerHTML, so we modify the value attribute instead\n    if (element instanceof HTMLInputElement) {\n      element.value = html;\n      return;\n    } \n\n    if (doSafe) {\n      element.textContent = html; // Populate element with plain-text HTML/text\n    } else {\n      element.innerHTML = html; // Populate element with HTML/text\n    }\n  }\n\n  /** Handles dragging of the overlay.\n   * @param {string} moveMe - The ID of the element to be moved\n   * @param {string} iMoveThings - The ID of the element to be moved\n   * @since 0.8.2\n  */\n  handleDrag(moveMe, iMoveThings) {\n    let isDragging = false;\n    let offsetX, offsetY = 0;\n\n    // Retrieves the elements (allows either '#id' or 'id' to be passed in)\n    moveMe = document.querySelector(moveMe?.[0] == '#' ? moveMe : '#' + moveMe);\n    iMoveThings = document.querySelector(iMoveThings?.[0] == '#' ? iMoveThings : '#' + iMoveThings);\n\n    // What to do when one of the two elements are not found\n    if (!moveMe || !iMoveThings) {\n      this.handleDisplayError(`Can not drag! ${!moveMe ? 'moveMe' : ''} ${!moveMe && !iMoveThings ? 'and ' : ''}${!iMoveThings ? 'iMoveThings ' : ''}was not found!`);\n      return; // Kills itself\n    }\n\n    // What to do when the mouse is pressed down on the element that moves things\n    iMoveThings.addEventListener('mousedown', function(event) {\n      isDragging = true;\n      offsetX = event.clientX - moveMe.getBoundingClientRect().left;\n      offsetY = event.clientY - moveMe.getBoundingClientRect().top;\n      document.body.style.userSelect = 'none'; // Prevents text selection while dragging\n      iMoveThings.classList.add('dragging'); // Adds a class to indicate a dragging state\n    });\n\n    // What to do when the touch starts on the element that moves things\n    iMoveThings.addEventListener('touchstart', function(event) {\n      isDragging = true;\n      const touch = event?.touches?.[0];\n      if (!touch) {return;}\n      offsetX = touch.clientX - moveMe.getBoundingClientRect().left; // Distance between the left edge of the overlay, and the cursor\n      offsetY = touch.clientY - moveMe.getBoundingClientRect().top; // Distance between the top edge of the overlay, and the cursor\n      document.body.style.userSelect = 'none'; // Prevents text selection while dragging\n      iMoveThings.classList.add('dragging'); // Adds a class to indicate a dragging state\n    }, { passive: false }); // Prevents scrolling from being captured\n\n    // What to do when the mouse is moved while dragging\n    document.addEventListener('mousemove', function(event) {\n      if (isDragging) {\n        moveMe.style.left = (event.clientX - offsetX) + 'px'; // Binds the overlay to the left side of the screen, and sets it's position to the cursor\n        moveMe.style.top = (event.clientY - offsetY) + 'px'; // Binds the overlay to the top of the screen, and sets it's position to the cursor\n        moveMe.style.right = ''; // Destroys the right property to unbind the overlay from the right side of the screen\n      }\n    });\n\n    // What to do when the touch moves while dragging\n    document.addEventListener('touchmove', function(event) {\n      if (isDragging) {\n        const touch = event?.touches?.[0];\n        if (!touch) {return;}\n        moveMe.style.left = (touch.clientX - offsetX) + 'px';\n        moveMe.style.top = (touch.clientY - offsetY) + 'px';\n        event.preventDefault(); // prevent scrolling while dragging\n      }\n    }, { passive: false }); // Prevents scrolling from being captured\n\n    // What to do when the mouse is released\n    document.addEventListener('mouseup', function() {\n      isDragging = false;\n      document.body.style.userSelect = ''; // Restores text selection capability after dragging\n      iMoveThings.classList.remove('dragging'); // Removes the dragging class\n    });\n\n    // What to do when the touch ends\n    document.addEventListener('touchend', function() {\n      isDragging = false;\n      document.body.style.userSelect = ''; // Restores text selection capability after dragging\n      iMoveThings.classList.remove('dragging'); // Removes the dragging class\n    });\n\n    // What to do when the touch is cancelled\n    document.addEventListener('touchcancel', function() {\n      isDragging = false;\n      document.body.style.userSelect = ''; // Restores text selection capability after dragging\n      iMoveThings.classList.remove('dragging'); // Removes the dragging class\n    });\n  }\n\n  /** Handles error display.\n   * This will output plain text into the output Status box.\n   * Additionally, this will output an error to the console.\n   * @param {string} text - The error text to display.\n   * @since 0.41.6\n   */\n  handleDisplayError(text) {\n    const consoleError = console.error; // Idk anymore...\n    consoleError(`${this.name}: ${text}`); // Outputs something like \"ScriptName: text\" as an error to the console\n    this.updateInnerHTML(this.outputStatusId, 'Error: ' + text, true);\n  }\n}","/** This class contains all MutationObservers used (which is 1 probably).\n * This is not an object, but rather a \"collection\" of functions (in a class).\n * @since 0.43.2\n */\nexport default class Observers {\n\n  /** The constructor for the observer class\n   * @since 0.43.2\n   */\n  constructor() {\n    this.observerBody = null;\n    this.observerBodyTarget = null;\n    this.targetDisplayCoords = '#bm-display-coords';\n  }\n\n  /** Creates the MutationObserver for document.body\n   * @param {HTMLElement} target - Targeted element to watch\n   * @returns {Observers} this (Observers class)\n   * @since 0.43.2\n   */\n  createObserverBody(target) {\n\n    this.observerBodyTarget = target;\n\n    this.observerBody = new MutationObserver((mutations) => {\n      for (const mutation of mutations) {\n        for (const node of mutation.addedNodes) {\n\n          if (!(node instanceof HTMLElement)) {continue;} // Does not track non-HTMLElements\n          \n          if (node.matches?.(this.targetDisplayCoords)) {\n\n          }\n        }\n      }\n    })\n\n    return this;\n  }\n\n  /** Retrieves the MutationObserver that watches document.body\n   * @returns {MutationObserver}\n   * @since 0.43.2\n   */\n  getObserverBody() {\n    return this.observerBody;\n  }\n\n  /** Observe a MutationObserver\n   * @param {MutationObserver} observer - The MutationObserver\n   * @param {boolean} watchChildList - (Optional) Should childList be watched? False by default\n   * @param {boolean} watchSubtree - (Optional) Should childList be watched? False by default\n   * @since 0.43.2\n   */\n  observe(observer, watchChildList=false, watchSubtree=false) {\n    observer.observe(this.observerBodyTarget, {\n      childList: watchChildList,\n      subtree: watchSubtree\n    });\n  }\n}","/** Contains miscellaneous helper functions.\n * @since 0.44.2\n */\nexport default class Utils {\n\n  /** Sanitizes HTML to display as plain-text.\n   * This prevents some Cross Site Scripting (XSS).\n   * This is handy when you are displaying user-made data, and you *must* use innerHTML.\n   * @param {string} text - The text to sanitize\n   * @returns {string} HTML escaped string\n   * @since 0.44.2\n   * @example\n   * const paragraph = document.createElement('p');\n   * paragraph.innerHTML = escapeHTML('<u>Foobar.</u>');\n   * // Output:\n   * // (Does not include the paragraph element)\n   * // (Output is not HTML formatted)\n   * <p>\n   *   \"<u>Foobar.</u>\"\n   * </p>\n   */\n  static escapeHTML(text) {\n    const div = document.createElement('div'); // Creates a div\n    div.textContent = text; // Puts the text in a PLAIN-TEXT property\n    return div.innerHTML; // Returns the HTML property of the div\n  }\n}","import Overlay from './overlay.js';\nimport Observers from './observers.js';\nimport CoordsHandler from './coordsHandler.js';\nimport ApiHandler from './apiHandler.js';\n\nconst name = GM_info.script.name.toString();\nconst version = GM_info.script.version.toString();\n\n/** Injects code into the client\n * This code will execute outside of TamperMonkey's sandbox\n * @param {*} fn - The code to execute\n * @since 0.11.15\n */\nfunction inject(fn) {\n    const script = document.createElement('script');\n    script.textContent = `(${fn})();`;\n    document.documentElement.appendChild(script);\n    script.remove();\n}\n\n/** What code to execute instantly in the client.\n * This code will execute outside of TamperMonkey's sandbox\n * @since 0.11.15\n */\ninject(() => {\n  \n  // Spys on \"spontaneous\" fetch requests made by the client\n  const originalFetch = window.fetch; // Saves a copy of the original fetch\n\n  // Overrides fetch\n  window.fetch = async function(...args) {\n\n    const response = await originalFetch.apply(this, args); // Sends a fetch\n    const cloned = response.clone(); // Makes a copy of the response\n\n    // Check Content-Type to only process JSON\n    const contentType = cloned.headers.get('content-type') || '';\n    if (contentType.includes('application/json')) {\n\n      // Retrieves the endpoint name. Unknown endpoint = \"ignore\"\n      let endpointName = ((args[0] instanceof Request) ? args[0]?.url : args[0]) || 'ignore';\n      //endpointName = endpointName.split('/').filter(Boolean).pop() || 'ignore';\n\n      console.log(`Sending JSON message about endpoint \"${endpointName}\"`);\n\n      // Sends a message about the endpoint it spied on\n      cloned.json()\n        .then(jsonData => {\n          window.postMessage({\n            source: 'blue-marble',\n            endpoint: endpointName,\n            jsonData: jsonData\n          }, '*');\n        })\n        .catch(err => {\n          console.error('BM - Failed to parse JSON:', err);\n        });\n    }\n\n    return response; // Returns the original response\n  };\n});\n\n// Imports the CSS file from dist folder on github\nconst cssOverlay = GM_getResourceText(\"CSS-BM-File\");\nGM_addStyle(cssOverlay);\n\n// Imports the Roboto Mono font family\nvar stylesheetLink = document.createElement('link');\nstylesheetLink.href = 'https://fonts.googleapis.com/css2?family=Roboto+Mono:ital,wght@0,100..700;1,100..700&display=swap';\nstylesheetLink.rel = 'preload';\nstylesheetLink.as = 'style';\nstylesheetLink.onload = function () {\n  this.onload = null;\n  this.rel = 'stylesheet';\n};\ndocument.head.appendChild(stylesheetLink);\n\nconst observers = new Observers(); // Constructs a new Observers object\nconst overlay = new Overlay(name, version); // Constructs a new Overlay object\nconst coordsHandler = new CoordsHandler(); // Constructs a new CoordsHandler object\nconst apiHandler = new ApiHandler(coordsHandler); // Constructs a new ApiHandler object\n\noverlay.setApiHandler(apiHandler); // Sets the API handler\n\n// Deploys the overlay to the page\n// Parent/child relationships in the DOM structure below are indicated by indentation\noverlay.addDiv({'id': 'bm-overlay', 'style': 'top: 10px; right: 75px;'})\n  .addDiv({'id': 'bm-contain-header'})\n    .addDiv({'id': 'bm-bar-drag'}).buildElement()\n    .addImg({'alt': 'Blue Marble Icon', 'src': 'https://raw.githubusercontent.com/SwingTheVine/Wplace-BlueMarble/main/src/assets/Favicon.png'}).buildElement()\n    .addHeader(1, {'textContent': name}).buildElement()\n  .buildElement()\n\n  .addHr().buildElement()\n\n  .addDiv({'id': 'bm-contain-userinfo'})\n    .addP({'id': 'bm-user-name', 'textContent': 'Username:'}).buildElement()\n    .addP({'id': 'bm-user-droplets', 'textContent': 'Droplets:'}).buildElement()\n    .addP({'id': 'bm-user-nextlevel', 'textContent': 'Next level in...'}).buildElement()\n  .buildElement()\n\n  .addHr().buildElement()\n\n  .addDiv({'id': 'bm-contain-automation'})\n    .addCheckbox({'id': 'bm-input-stealth', 'textContent': 'Stealth', 'checked': true}).buildElement()\n    .addButtonHelp({'title': 'Waits for the website to make requests, instead of sending requests.'}).buildElement()\n    .addBr().buildElement()\n    .addCheckbox({'id': 'bm-input-possessed', 'textContent': 'Possessed', 'checked': true}).buildElement()\n    .addButtonHelp({'title': 'Controls the website as if it were possessed.'}).buildElement()\n    .addBr().buildElement()\n    .addDiv({'id': 'bm-contain-coords'})\n      .addButton({'id': 'bm-button-coords', 'className': 'bm-help', 'style': 'margin-top: 0;', 'innerHTML': '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 4 6\"><circle cx=\"2\" cy=\"2\" r=\"2\"></circle><path d=\"M2 6 L3.7 3 L0.3 3 Z\"></path><circle cx=\"2\" cy=\"2\" r=\"0.7\" fill=\"white\"></circle></svg></svg>'},\n        (instance, button) => {\n          button.onclick = () => {\n            const coords = instance.apiHandler?.coordsTilePixel; // Retrieves the coords from the API handler\n            if (!coords?.[0]) {\n              instance.handleDisplayError('Coordinates are malformed! Did you try clicking on the canvas first?');\n              return;\n            }\n            instance.updateInnerHTML('bm-input-tx', coords?.[0] || '');\n            instance.updateInnerHTML('bm-input-ty', coords?.[1] || '');\n            instance.updateInnerHTML('bm-input-px', coords?.[2] || '');\n            instance.updateInnerHTML('bm-input-py', coords?.[3] || '');\n          }\n        }\n      ).buildElement()\n      .addInput({'type': 'number', 'id': 'bm-input-tx', 'placeholder': 'Tl X', 'min': 0, 'max': 2047, 'step': 1}).buildElement()\n      .addInput({'type': 'number', 'id': 'bm-input-ty', 'placeholder': 'Tl Y', 'min': 0, 'max': 2047, 'step': 1}).buildElement()\n      .addInput({'type': 'number', 'id': 'bm-input-px', 'placeholder': 'Px X', 'min': 0, 'max': 2047, 'step': 1}).buildElement()\n      .addInput({'type': 'number', 'id': 'bm-input-py', 'placeholder': 'Px Y', 'min': 0, 'max': 2047, 'step': 1}).buildElement()\n    .buildElement()\n    .addInputFile({'id': 'bm-input-file-template', 'textContent': 'Upload Template'}).buildElement()\n    .addDiv({'id': 'bm-contain-buttons'})\n      .addButton({'id': 'bm-button-enable', 'textContent': 'Enable'}).buildElement()\n      .addButton({'id': 'bm-button-disable', 'textContent': 'Disable'}).buildElement()\n    .buildElement()\n    .addTextarea({'id': overlay.outputStatusId, 'placeholder': `Status: Sleeping...\\nVersion: ${version}`, 'readOnly': true}).buildElement()\n  .buildElement()\n.buildOverlay(document.body);\n\noverlay.handleDrag('#bm-overlay', '#bm-bar-drag'); // Creates dragging capability on the drag bar for dragging the overlay\n\napiHandler.spontaneousResponseListener(overlay); // Reads spontaneous fetch responces\n\nconsole.log(`${name} (${version}) userscript has loaded!`);","/** Handles translation of coordinate systems.\n * @since 0.42.4\n */\nexport default class CoordsHandler {\n\n  /** Converts the server tile-pixel coordinate system to the displayed tile-pixel coordinate system.\n   * @param {string[]} tile - The tile to convert (as an array like [\"12\", \"124\"])\n   * @param {string[]} pixel - The pixel to convert (as an array like [\"12\", \"124\"])\n   * @returns {number[]} [tile, pixel]\n   * @since 0.42.4\n   * @example\n   * console.log(serverTPtoDisplayTP(['12', '123'], ['34', '567'])); // [34, 3567]\n   */\n  serverTPtoDisplayTP(tile, pixel) {\n    return [((parseInt(tile[0]) % 4) * 1000) + parseInt(pixel[0]), ((parseInt(tile[1]) % 4) * 1000) + parseInt(pixel[1])];\n  }\n}","/** ApiHandler class for handling API requests, responses, and interactions.\n * Note: Fetch spying is done in main.js, not here.\n * @since 0.11.1\n */\n\nimport Utils from \"./utils\";\n\nexport default class ApiHandler {\n\n  /** Constructor for ApiHandler class\n   * @param {CoordsHandler} coordsHandler - The CoordsHandler instance\n   * @since 0.11.34\n   */\n  constructor(coordsHandler) {\n    this.coordsHandler = coordsHandler;\n    this.disableAll = false; // Should the entire userscript be disabled?\n    this.coordsTilePixel = []; // Contains the last detected tile/pixel coordinate pair requested\n  }\n\n  /** Determines if the spontaneously recieved response is something we want.\n   * Otherwise, we can ignore it.\n   * Note: Due to aggressive compression, make your calls like `data['jsonData']['name']` instead of `data.jsonData.name`\n   * \n   * @param {Overlay} overlay - The Overlay class instance\n   * @since 0.11.1\n  */\n  spontaneousResponseListener(overlay) {\n\n    // Triggers whenever a message is sent\n    window.addEventListener('message', (event) => {\n\n      const data = event.data; // The data of the message\n      const dataJSON = data['jsonData']; // The JSON response, if any\n\n      // Kills itself if the message was not intended for Blue Marble\n      if (!(data && data['source'] === 'blue-marble')) {return;}\n\n      // Trims endpoint to the second to last non-number, non-null directoy.\n      // E.g. \"wplace.live/api/pixel/0/0?payload\" -> \"pixel\"\n      const endpointText = data['endpoint'].split('?')[0].split('/').filter(s => s && isNaN(Number(s))).pop();\n\n      console.log(`Recieved message about \"${endpointText}\"`);\n\n      // Each case is something that Blue Marble can use from the fetch.\n      // For instance, if the fetch was for \"me\", we can update the overlay stats\n      switch (endpointText) {\n\n        case 'me': // Request to retrieve user data\n\n          // If the game can not retrieve the userdata...\n          if (dataJSON['status'] && dataJSON['status']?.toString()[0] != '2') {\n            // The server is probably down (NOT a 2xx status)\n            \n            overlay.handleDisplayError(`The game is down!\\nCould not fetch userdata.`);\n            return; // Kills itself before attempting to display null userdata\n          }\n\n          const nextLevelPixels = Math.ceil(Math.pow(Math.floor(dataJSON['level']) * Math.pow(30, 0.65), (1/0.65)) - dataJSON['pixelsPainted']); // Calculates pixels to the next level\n          \n          const clog = console.log;\n          clog(dataJSON);\n          clog(dataJSON?.droplets);\n\n          overlay.updateInnerHTML('bm-user-name', `Username: <b>${Utils.escapeHTML(dataJSON['name'])}</b>`); // Updates the text content of the username field\n          overlay.updateInnerHTML('bm-user-droplets', `Droplets: <b>${new Intl.NumberFormat().format(dataJSON['droplets'])}</b>`); // Updates the text content of the droplets field\n          overlay.updateInnerHTML('bm-user-nextlevel', `Next level in <b>${new Intl.NumberFormat().format(nextLevelPixels)}</b> pixel${nextLevelPixels == 1 ? '' : 's'}`); // Updates the text content of the next level field\n          break;\n\n        case 'pixel': // Request to retrieve pixel data\n          const coordsTile = data['endpoint'].split('?')[0].split('/').filter(s => s && !isNaN(Number(s))); // Retrieves the tile coords as [x, y]\n          const payloadExtractor = new URLSearchParams(data['endpoint'].split('?')[1]); // Declares a new payload deconstructor and passes in the fetch request payload\n          const coordsPixel = [payloadExtractor.get('x'), payloadExtractor.get('y')]; // Retrieves the deconstructed pixel coords from the payload\n          this.coordsTilePixel = [...coordsTile, ...coordsPixel]; // Combines the two arrays such that [x, y, x, y]\n          const displayTP = this.coordsHandler.serverTPtoDisplayTP(coordsTile, coordsPixel);\n          \n          const spanElements = document.querySelectorAll('span'); // Retrieves all span elements\n\n          // For every span element, find the one we want (pixel numbers when canvas clicked)\n          for (const element of spanElements) {\n            if (element.textContent.trim().includes(`${displayTP[0]}, ${displayTP[1]}`)) {\n\n              let displayCoords = document.querySelector('#bm-display-coords'); // Find the additional pixel coords span\n\n              const text = `(Tl X: ${coordsTile[0]}, Tl Y: ${coordsTile[1]}, Px X: ${coordsPixel[0]}, Px Y: ${coordsPixel[1]})`;\n              \n              // If we could not find the addition coord span, we make it then update the textContent with the new coords\n              if (!displayCoords) {\n                displayCoords = document.createElement('span');\n                displayCoords.id = 'bm-display-coords';\n                displayCoords.textContent = text;\n                displayCoords.style = 'margin-left: calc(var(--spacing)*3); font-size: small;';\n                element.parentNode.parentNode.parentNode.insertAdjacentElement('afterend', displayCoords);\n              } else {\n                displayCoords.textContent = text;\n              }\n            }\n          }\n          break;\n\n        case 'robots': // Request to retrieve what script types are allowed\n          this.disableAll = dataJSON['userscript']?.toString().toLowerCase() == 'false'; // Disables Blue Marble if site owner wants userscripts disabled\n          break;\n\n      }\n    });\n  }\n}"],"mappings":"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","ignoreList":[]}